{"version":3,"sources":["components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","services/getMovies.jsx","functions/getLocalStorage.js","views/MoviesView.js","components/Button/Button.module.css","functions/cutGenres.js","components/Loader/Loader.jsx","components/Button/Button.jsx","components/MovieList/MovieList.module.css","components/MovieItem/MovieItem.module.css","components/MoviePreview/MoviePreview.jsx","functions/decodeGenres.js","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx"],"names":["module","exports","Searchbar","state","query","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","onSubmit","props","className","styles","SearchForm","this","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","onChange","onKeyDown","handleKeyDown","Component","axios","defaults","baseURL","params","api_key","language","include_adult","getMovies","a","page","get","data","results","console","log","error","getLocalStorage","key","stateInLocalStorage","localStorage","getItem","undefined","JSON","parse","MoviesView","movies","searchQuery","currentPage","isLoading","onChangeQuery","searchMovies","options","then","prevState","catch","finally","prevProps","setItem","stringify","genresList","MovieList","length","Button","onClick","defaultProps","cutGenres","genres","mapedGenres","map","name","slicedMapedGenres","slice","push","join","Load","color","height","width","timeout","window","scrollTo","top","document","documentElement","scrollHeight","behavior","buttonLoad","MoviePreview","poster","title","release","filmsGalleryItemPoster","src","alt","filmsGalleryItemTitle","toUpperCase","split","filmsGalleryItemGenres","withRouter","decodeGenres","genresIds","allGenres","filteredGenres","filter","genre","includes","id","MovieItem","to","pathname","from","location","item","release_date","poster_path","genre_ids"],"mappings":"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","file":"static/js/movies-view.092afa1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__aTxF_\",\"SearchForm\":\"Searchbar_SearchForm__29ASD\",\"SearchFormButton\":\"Searchbar_SearchFormButton__1-91V\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__d72hy\",\"SearchFormInput\":\"Searchbar_SearchFormInput__3wO4_\"};","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nimport styles from './Searchbar.module.css';\n// import { v4 as uuidv4 } from 'uuid';\n\nclass Searchbar extends Component {\n  state = {\n    query: '',\n  };\n\n  handleChange = e => {\n    this.setState({ query: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    onSubmit(this.state.query);\n    this.setState({ query: '' });\n  };\n\n  render() {\n    // console.log(this.state.query);\n    return (\n      <header className={styles.Searchbar}>\n        <form className={styles.SearchForm} onSubmit={this.handleSubmit}>\n          <button\n            type=\"submit\"\n            className={styles.SearchFormButton}\n            onSubmit={this.handleSubmit}\n          >\n            <span className={styles.SearchFormButtonLabel}>Search</span>\n          </button>\n\n          <input\n            className={styles.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyDown}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Searchbar;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ffddee44025dd24685ea61d637d56d24';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  include_adult: 'false',\n};\n\nconst getMovies = async ({ query, page }) => {\n  try {\n    const { data } = await axios.get('/search/movie', {\n      params: { query, page },\n    });\n    return data.results;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\nexport default getMovies;\n\n// https://api.themoviedb.org/3/search/movie?query=<<query>>&api_key=<<api_key>>&language=en-US&page=1\n","function getLocalStorage(key) {\n  try {\n    const stateInLocalStorage = localStorage.getItem(key);\n    return stateInLocalStorage === null\n      ? undefined\n      : JSON.parse(stateInLocalStorage);\n  } catch (error) {\n    console.log('Get state error: ', error);\n  }\n}\n\nexport default getLocalStorage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Searchbar from '../components/Searchbar';\nimport Load from '../components/Loader';\nimport Button from '../components/Button';\nimport MovieList from '../components/MovieList';\n\nimport getMovies from '../services/getMovies';\nimport getLocalStorage from '../functions/getLocalStorage';\n\nclass MoviesView extends Component {\n  state = {\n    movies: [],\n    searchQuery: '',\n    currentPage: 1,\n    isLoading: false,\n    error: null,\n  };\n\n  static defaultProps = {\n    genresList: [],\n  };\n\n  static propTypes = {\n    genresList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n      }),\n    ),\n  };\n\n  componentDidMount() {\n    const stateInLocalStorage = getLocalStorage('savedState');\n    if (\n      stateInLocalStorage !== undefined &&\n      stateInLocalStorage !== this.state\n    ) {\n      this.setState({\n        searchQuery: stateInLocalStorage.searchQuery,\n        currentPage: stateInLocalStorage.currentPage - 1,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.searchMovies();\n    }\n    localStorage.setItem(`savedState`, JSON.stringify(this.state));\n  }\n\n  onChangeQuery = query => {\n    this.setState({\n      searchQuery: query,\n      currentPage: 1,\n      movies: [],\n    });\n  };\n\n  searchMovies = () => {\n    const { currentPage, searchQuery } = this.state;\n    const options = { query: searchQuery, page: currentPage };\n    this.setState({ isLoading: true });\n\n    getMovies(options)\n      .then(movies => {\n        this.setState(prevState => ({\n          // movies: [...prevState.movies, ...movies],\n          movies: [...movies],\n          currentPage: prevState.currentPage + 1,\n        }));\n      })\n      .catch(error => this.setState({ error: error }))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  render() {\n    const { movies, isLoading } = this.state;\n    const { genresList } = this.props;\n\n    return (\n      <>\n        <Searchbar onSubmit={this.onChangeQuery} />\n        <MovieList movies={movies} genresList={genresList} />\n        {isLoading && <Load />}\n        {movies.length > 19 && !isLoading && (\n          <Button onClick={this.searchMovies} />\n        )}\n      </>\n    );\n  }\n}\n\nexport default MoviesView;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonLoad\":\"Button_buttonLoad__3AieG\"};","function cutGenres(genres) {\n  const mapedGenres = genres.map(({ name }) => name);\n  // console.log('mapedGenres: ', mapedGenres);\n\n  let slicedMapedGenres = [];\n\n  if (mapedGenres.length < 3) {\n    slicedMapedGenres = mapedGenres;\n  } else {\n    slicedMapedGenres = mapedGenres.slice(0, 2);\n    slicedMapedGenres.push('Other');\n  }\n\n  return slicedMapedGenres.join(', ');\n}\n\nexport default cutGenres;\n","import React, { Component } from 'react';\n\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nclass Load extends Component {\n  render() {\n    return (\n      <Loader\n        type=\"Circles\"\n        color=\"#00BFFF\"\n        height={80}\n        width={80}\n        timeout={3000}\n      />\n    );\n  }\n}\n\nexport default Load;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Button.module.css';\n\nclass Button extends Component {\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render() {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n    const { onClick } = this.props;\n    return (\n      <button type=\"button\" className={styles.buttonLoad} onClick={onClick}>\n        Load more\n      </button>\n    );\n  }\n}\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieList\":\"MovieList_MovieList__1FSgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieItem\":\"MovieItem_MovieItem__1dVZ3\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nimport styles from './MoviePreview.module.css';\n\nclass MoviePreview extends Component {\n  static defaultProps = {\n    title: '',\n    release: '',\n    poster: '',\n    genres: '',\n  };\n\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    release: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.string.isRequired,\n  };\n\n  render() {\n    const { poster, title, genres, release } = this.props;\n    return (\n      <>\n        <img\n          className={styles.filmsGalleryItemPoster}\n          src={`https://image.tmdb.org/t/p/w500${poster}`}\n          alt={title}\n        />\n        <p className={styles.filmsGalleryItemTitle}>\n          {title.toUpperCase()} {release && `(${release.split('-')[0]})`}\n        </p>\n        <p className={styles.filmsGalleryItemGenres}>{genres}</p>\n      </>\n    );\n  }\n}\n\nexport default withRouter(MoviePreview);\n","import cutGenres from '../functions/cutGenres';\n\nfunction decodeGenres(genresIds, allGenres) {\n  // console.log(allGenres);\n  // console.log(genresIds);\n\n  const filteredGenres = allGenres.filter(genre =>\n    genresIds.includes(genre.id),\n  );\n  // console.log('filteredGenres: ', filteredGenres);\n\n  return cutGenres(filteredGenres);\n}\n\nexport default decodeGenres;\n","import React, { Component } from 'react';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport styles from './MovieItem.module.css';\n\nimport MoviePreview from '../MoviePreview';\nimport decodeGenres from '../../functions/decodeGenres';\n\nclass MovieItem extends Component {\n  static defaultProps = {\n    genresList: [],\n    id: '',\n    title: '',\n    release: '',\n    poster: '',\n    genresIds: '',\n  };\n\n  static propTypes = {\n    genresList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n      }),\n    ),\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genresIds: PropTypes.array.isRequired,\n  };\n\n  render() {\n    const { id, poster, title, genresIds, release, genresList } = this.props;\n    const genres = decodeGenres(genresIds, genresList);\n\n    return (\n      <li key={id} className={styles.MovieItem}>\n        <NavLink\n          to={{\n            pathname: `/movies/${id}`,\n            state: { from: this.props.location },\n          }}\n        >\n          <MoviePreview\n            poster={poster}\n            title={title}\n            genres={genres}\n            release={release}\n          />\n        </NavLink>\n      </li>\n    );\n  }\n}\n\nexport default withRouter(MovieItem);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nimport styles from './MovieList.module.css';\nimport MovieItem from '../MovieItem';\n\nclass MovieList extends Component {\n  static defaultProps = {\n    genresList: [],\n    movies: [],\n  };\n\n  static propTypes = {\n    genresList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n      }),\n    ),\n    movies: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        release: PropTypes.string.isRequired,\n        poster: PropTypes.string.isRequired,\n        genresIds: PropTypes.array.isRequired,\n      }),\n    ),\n  };\n\n  render() {\n    const { movies } = this.props;\n    const { genresList } = this.props;\n    // console.log(trends);\n    // console.log(genresList);\n    return (\n      <ul className={styles.MovieList}>\n        {movies.map(item => (\n          <MovieItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            release={item.release_date}\n            poster={item.poster_path}\n            genresIds={item.genre_ids}\n            genresList={genresList}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default withRouter(MovieList);\n"],"sourceRoot":""}